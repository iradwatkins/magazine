generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// NextAuth.js Account model - OAuth/email provider accounts
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("Account")
}

/// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("Session")
}

/// User model for NextAuth.js authentication
model User {
  id               String         @id @default(cuid())
  name             String?
  email            String?        @unique
  emailVerified    DateTime?
  image            String?
  role             UserRole       @default(USER)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  sessions         Session[]
  articleLikes     ArticleLike[]
  articles         Article[]      @relation("ArticleAuthor")
  reviewedArticles Article[]      @relation("ArticleReviewer")
  commentFlags     CommentFlag[]
  deletedComments  Comment[]      @relation("DeletedComments")
  comments         Comment[]      @relation("CommentAuthor")
  uploadedMedia    Media[]        @relation("MediaUploadedBy")
  writerProfile    WriterProfile? @relation("WriterProfile")

  @@index([email])
  @@map("User")
}

/// NextAuth.js verification token model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken")
}

/// Magazine article
model Article {
  id              String          @id @default(cuid())
  authorId        String
  authorName      String
  authorPhoto     String?
  authorBio       String?
  title           String
  slug            String          @unique
  subtitle        String?
  content         String
  excerpt         String?
  featuredImage   String?
  images          String[]
  category        ArticleCategory
  tags            String[]
  metaTitle       String?
  metaDescription String?
  status          ArticleStatus
  submittedAt     DateTime?
  reviewedBy      String?
  reviewedAt      DateTime?
  reviewNotes     String?
  publishedAt     DateTime?
  isFeatured      Boolean         @default(false)
  featuredUntil   DateTime?
  viewCount       Int             @default(0)
  likeCount       Int             @default(0)
  shareCount      Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  likes           ArticleLike[]
  author          User            @relation("ArticleAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  reviewer        User?           @relation("ArticleReviewer", fields: [reviewedBy], references: [id])
  comments        Comment[]

  @@index([authorId])
  @@index([reviewedBy])
  @@index([status])
  @@index([category])
  @@index([publishedAt])
  @@map("articles")
}

/// Article comment
model Comment {
  id            String        @id @default(cuid())
  articleId     String
  userId        String
  userName      String
  userPhoto     String?
  content       String
  parentId      String?
  isApproved    Boolean       @default(true)
  isFlagged     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  deletedBy     String?
  flagCount     Int           @default(0)
  flags         CommentFlag[]
  article       Article       @relation(fields: [articleId], references: [id], onDelete: Cascade)
  deletedByUser User?         @relation("DeletedComments", fields: [deletedBy], references: [id])
  parent        Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]     @relation("CommentReplies")
  user          User          @relation("CommentAuthor", fields: [userId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([userId])
  @@index([isFlagged])
  @@index([deletedAt])
  @@map("comments")
}

/// Comment flag/report
model CommentFlag {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  reason    String
  details   String?
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@map("comment_flags")
}

/// Category management
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?
  createdAt   DateTime @default(now())

  @@map("categories")
}

/// Writer profile
model WriterProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  displayName   String
  slug          String   @unique
  bio           String?
  photoUrl      String?
  instagramUrl  String?
  twitterUrl    String?
  websiteUrl    String?
  isApproved    Boolean  @default(false)
  totalArticles Int      @default(0)
  totalViews    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation("WriterProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("writer_profiles")
}

/// Media file
model Media {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  url          String
  thumbnailUrl String?
  mimeType     String
  size         Int
  width        Int?
  height       Int?
  alt          String?
  caption      String?
  credit       String?
  bucketKey    String
  uploadedById String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploadedBy   User     @relation("MediaUploadedBy", fields: [uploadedById], references: [id], onDelete: Cascade)

  @@index([uploadedById])
  @@index([mimeType])
  @@index([createdAt])
  @@map("media")
}

/// Article like
model ArticleLike {
  id        String   @id @default(cuid())
  articleId String
  userId    String
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([articleId, userId])
  @@index([articleId])
  @@index([userId])
  @@map("article_likes")
}

/// Debug log for tracking user actions and errors
model DebugLog {
  id        String   @id @default(cuid())
  sessionId String
  type      String   // 'action' | 'error' | 'api' | 'navigation' | 'auth'
  level     String   // 'info' | 'warning' | 'error' | 'success'
  category  String
  message   String
  details   String?  @db.Text
  url       String?
  userId    String?
  ip        String?
  userAgent String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())

  @@index([sessionId])
  @@index([type])
  @@index([level])
  @@index([userId])
  @@index([timestamp])
  @@map("debug_logs")
}

/// User roles in the SteppersLife ecosystem
enum UserRole {
  ADMIN
  USER
  STORE_OWNER
  STORE_ADMIN
  RESTAURANT_OWNER
  EVENT_ORGANIZER
  INSTRUCTOR
  SERVICE_PROVIDER
  MAGAZINE_WRITER
  RESTAURANT_MANAGER
  RESTAURANT_STAFF
  EVENT_STAFF
  AFFILIATE
  MAGAZINE_EDITOR
}

/// Business types in the ecosystem
enum BusinessType {
  RESTAURANT
  EVENT
  STORE
  CLASS
  SERVICE
  MAGAZINE
}

/// Role assignment status
enum RoleAssignmentStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

/// Article status in review/publication workflow
enum ArticleStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PUBLISHED
  REJECTED
  ARCHIVED
}

/// Article category
enum ArticleCategory {
  NEWS
  EVENTS
  INTERVIEWS
  HISTORY
  TUTORIALS
  LIFESTYLE
  FASHION
  MUSIC
  COMMUNITY
  OTHER
}
